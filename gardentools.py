# The purpose of this file is to keep webapp.py more clean

# standard
import json
import os
import datetime

# third party
import yaml

# keeps time standard
NOW = datetime.datetime.now()
BASE_DIR = os.path.split(os.path.realpath(__file__))[0]


def get_config(f='settings.yml'):
    try:
        with open(f) as in_file:
            config = yaml.safe_load(in_file.read())
        return config
    except FileNotFoundError:
        return {}


def log(dry, watered, photo=None, folder='{BASE_DIR}/logs'.format(BASE_DIR=BASE_DIR), f='logs.json'):
    if not os.path.isdir(folder):
        os.makedirs(folder)
    logs = os.path.join(folder, f)
    entry = {
        'dry': dry,
        'watered': watered,
        'photo': photo,
        'datetime': NOW.isoformat()
    }
    with open(logs, 'a') as output:
        output.write(str(json.dumps(entry)) + '\n')


def assign_type(value):
    """
    For casting values returned form settings forms.
    :param value:
    :return value as correct Python type:
    """
    if value.isnumeric():
        value = int(value)
    elif value == 'on':
        value = True
    elif value == 'off':
        value = False
    elif 'x' in value:
        value = [int(v) for v in value.split('x')]
    return value


def form_to_dict(form):
    """
    Takes an HTTP form response and casts it to a nested dict to be converted to .yaml
    :param form:
    :return settings:
    """
    settings = {}
    for key in form:
        value = assign_type(form[key])
        if '.' in key:
            keys = key.split('.')
            if keys[0] not in settings:
                settings[keys[0]] = {}
            settings[keys[0]][keys[1]] = value
    for mod in settings:
        if not settings[mod].get('enabled'):
            settings[mod]['enabled'] = False
    return settings


def settings_to_cron(settings, cron_file='/etc/cron.d/openGardener'):
    """
    Takes settings dict and writes a valid cron file on it to /etc/cron.d/
    :param settings:
    :param cron_file: Where to put the crontab
    :return:
    """
    scripts = {
        'camera': os.path.join(BASE_DIR, 'camera.py'),
        'moisture_sensor': os.path.join(BASE_DIR, 'moisture.py'),
        'pump': os.path.join(BASE_DIR, 'pump.py')
    }
    jobs = []
    for setting in scripts:
        enabled = settings[setting].get('enabled')
        frequency = settings[setting].get('frequency')
        cd = 'cd {BASE_DIR} &&'.format(BASE_DIR=BASE_DIR)
        python = '{BASE_DIR}/venv/bin/python3'.format(BASE_DIR=BASE_DIR)
        script = scripts[setting]
        if enabled and ':' in frequency:
            hours, minutes = frequency.split(':')
            hours = int(hours)
            minutes = int(minutes)
            if hours <= 1:
                hours = ''
            else:
                hours = '/{hours}'.format(hours=hours)
            if minutes <= 1:
                minutes = ''
            else:
                minutes = '/{minutes}'.format(minutes=minutes)
            cronjob = '*{minutes} *{hours} * * * pi {cd} {python} {script}'.format(
                hours=hours,
                minutes=minutes,
                script=script,
                cd=cd,
                python=python
            )
            jobs.append(cronjob)
    with open(cron_file, 'w') as output:
        output.write(
            "# cronjob generated by settings passed via openGardener's web interface\n"
            "SHELL=/bin/sh\n"
            "PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin\n"
        )
        for cronjob in jobs:
            output.write('{cronjob}\n'.format(cronjob=cronjob))
        output.write('\n')
